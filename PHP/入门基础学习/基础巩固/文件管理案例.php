<?php  
//一、文件引入(文件包含)：作用是代码重用，把常用代码写在一个文件里，当需要使用时引入这个文件。
inlcude('文件路径')、require('文件路径')  引入文件,不加_once运行速度更快
include_once('文件路径')、rquire_once('文件路径')  加_once表示只能引入一次，如果之前引用过，不再重复引用
include('./变量.php');  区别:include 跳过错误，继续向下执行
require('./运算符.php');     require 遇到错误，停止向下执行

//二、进制与位算法
①二、八、十六进制化十进制
	2进制BIN                1顶2^0,1顶2^1,1顶2^2……      如,1001=10
	8进制OCT →→→10进制DEC    1顶8^0,1顶8^1,1顶8^2……      如,46=4*8+6=38
	16进制HEX               1顶16^0,1顶16^1,1顶16^2……   如,3F=3*16+16=64

②十进制范围(0-255)是一个圆圈 →  255  1111 1111B
                            -1  1111 1111B(-1和255位置是一样的，你画个图就知道勒，但这个位置表示255还是-1                             取决于程序理解)
③位运算(直接对'二进制'每个位进行逻辑运算，如&|^)
	例如，0101 与 1100 &=0100 |=1101 ^=1001(异或，相异为1，相同为0)

④利用位运算左移，使整数增大2倍，右移使整数缩小2倍
  如	,$a=10;            计算机会转化成二进制
  echo $a<<1,'<br/>';  左移增大2倍
  echo $a>>1;          右移缩小2倍

⑤进制转换函数(二进制Bin,八进制Oct,十进制Dec,十六进制Hex)
bindec(number);
bin2hex();   二进制
---------- 
octdec();    八进制
----------
decbin();    十进制
decoct();
dechex();
----------
hex2bin()    十六进制
hexdec();

//三、php错误报告设置(配置文件php.ini设置或使用error_reporting函数)
php脚本错误分多个等级，不同等级用数字表示，如1,2,4,8……
为了防止数据泄露，为此要设置错误少报：
error_reporting(0); 不报错误
error_reporting(E_ALL); 报所有错误
error_reporting(E_ERROR|E_WARNING|E_PARSE);只报这些错误
error_reporting(E_ALL^E_NOTICE);报告除NOTICE外的所有错误
error_reporting(E_ALL&~错误);不想报那个错误(与^一样)
error_reporting(E_ALL&错误);只想报某个错误;

//四、浮点数不精确
某些小数在十进制下是有限的,转化成二进制会无限循环,因此损失了一些精度。
解决:①整数精确到分;②使用 round() 对浮点数进行四舍五入;

//五、逻辑运算的短路特性
当它一开始判断出结果的时候，它就不会继续执行,如 0 && 1(看到0就直接判断除是false,1也无看过)
利用短路特性写出简洁代码:如,defined('A')||define('A',a);(执行2个函数)
此外，||优先级大于=,遇到=需要加(),如,($a=7)||($b=6);


?>